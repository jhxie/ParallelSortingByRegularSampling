cmake_minimum_required(VERSION 3.5 FATAL_ERROR)
project(psrs C)

# the short system name, e.g. "Linux", "FreeBSD" or "Windows"
if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    # unfortunately I have not actually tested my code
    # on windows using mingw/cygwin
    # so feel free to report any bugs encoutered when you are using them
    if(NOT MINGW AND NOT CYGWIN)
        message(FATAL_ERROR
            "Non-MinGW/Cygwin build system is not supported!")
    endif()
endif()

# remember to override this variable if debug info is not needed
set(CMAKE_BUILD_TYPE "Build")

# add support for YCM
set(CMAKE_EXPORT_COMPILE_COMMANDS "ON")

# note that this compiler option should work for all compilers that support
# the same flag as gcc: so clang, mingw, and cygwin are all valid candidates
set(GCC_SIGNED_OVERFLOW_TRAP_FLAG "-ftrapv")
# set(GCC_SANITIZE_ADDRESS_FLAG "-fsanitize=address")
# set(GCC_SANITIZE_LEAK_FLAG "-fsanitize=leak")
# set(GCC_SANITIZE_UNDEFINED_FLAG "-fsanitize=undefined")
# from the cmake documentation: "Adds options to the compiler command line for
# sources in the current directory and below", so it is used rather than
# add_definitions(), which seems to be reserved for macros
add_compile_options(
    ${GCC_SIGNED_OVERFLOW_TRAP_FLAG})
    # ${GCC_SANITIZE_ADDRESS_FLAG}
    # ${GCC_SANITIZE_LEAK_FLAG}
    # ${GCC_SANITIZE_UNDEFINED_FLAG})

# all the targets generated by this master file requires c99
set(CMAKE_C_STANDARD 99)
# prevent the previous one from "decaying" to previous standards;
# i.e. make the c99 standard a requirement
set(CMAKE_C_STANDARD_REQUIRED ON)

# make sure that our source directory is on the current cmake module path so
# that we can include cmake files from this directory
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules")

# test the existence of pthread run-time on the system
find_package(Threads REQUIRED)
if(NOT CMAKE_THREAD_LIBS_INIT)
    message(FATAL_ERROR "Pthread must be supported on the system!")
else()
    # for systems that have multiple thread libraries support,
    # select pthread as the preferred implementation to link to
    if(NOT CMAKE_USE_PTHREADS_INIT)
        set(CMAKE_THREAD_PREFER_PTHREAD ON)
    endif()
endif()

# test the existence of python 3 interpreter
set(Python_ADDITIONAL_VERSIONS 3.5)
find_package(PythonInterp)
if(NOT PYTHONINTERP_FOUND)
    message(WARNING "Python 3.5 is required to run the plotting program!")
endif()

find_package(Matplotlib)
if(NOT MATPLOTLIB_FOUND)
    message(WARNING "Matplotlib is required to plot the speed graph!")
endif()

# common header(s) reside(s) in the include directory in the
# relative root directory of this project
include_directories(
    ${PROJECT_SOURCE_DIR}/include
)

add_subdirectory(src)
